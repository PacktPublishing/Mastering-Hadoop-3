/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package packt;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Author extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 593354583651940978L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Author\",\"namespace\":\"packt\",\"fields\":[{\"name\":\"author_name\",\"type\":\"string\"},{\"name\":\"author_id\",\"type\":\"string\"},{\"name\":\"author_address\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Author> ENCODER =
      new BinaryMessageEncoder<Author>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Author> DECODER =
      new BinaryMessageDecoder<Author>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Author> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Author> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Author>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Author to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Author from a ByteBuffer. */
  public static Author fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence author_name;
  @Deprecated public CharSequence author_id;
  @Deprecated public CharSequence author_address;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Author() {}

  /**
   * All-args constructor.
   * @param author_name The new value for author_name
   * @param author_id The new value for author_id
   * @param author_address The new value for author_address
   */
  public Author(CharSequence author_name, CharSequence author_id, CharSequence author_address) {
    this.author_name = author_name;
    this.author_id = author_id;
    this.author_address = author_address;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return author_name;
    case 1: return author_id;
    case 2: return author_address;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: author_name = (CharSequence)value$; break;
    case 1: author_id = (CharSequence)value$; break;
    case 2: author_address = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'author_name' field.
   * @return The value of the 'author_name' field.
   */
  public CharSequence getAuthorName() {
    return author_name;
  }

  /**
   * Sets the value of the 'author_name' field.
   * @param value the value to set.
   */
  public void setAuthorName(CharSequence value) {
    this.author_name = value;
  }

  /**
   * Gets the value of the 'author_id' field.
   * @return The value of the 'author_id' field.
   */
  public CharSequence getAuthorId() {
    return author_id;
  }

  /**
   * Sets the value of the 'author_id' field.
   * @param value the value to set.
   */
  public void setAuthorId(CharSequence value) {
    this.author_id = value;
  }

  /**
   * Gets the value of the 'author_address' field.
   * @return The value of the 'author_address' field.
   */
  public CharSequence getAuthorAddress() {
    return author_address;
  }

  /**
   * Sets the value of the 'author_address' field.
   * @param value the value to set.
   */
  public void setAuthorAddress(CharSequence value) {
    this.author_address = value;
  }

  /**
   * Creates a new Author RecordBuilder.
   * @return A new Author RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Author RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Author RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new Author RecordBuilder by copying an existing Author instance.
   * @param other The existing instance to copy.
   * @return A new Author RecordBuilder
   */
  public static Builder newBuilder(Author other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Author instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Author>
    implements org.apache.avro.data.RecordBuilder<Author> {

    private CharSequence author_name;
    private CharSequence author_id;
    private CharSequence author_address;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.author_name)) {
        this.author_name = data().deepCopy(fields()[0].schema(), other.author_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.author_id)) {
        this.author_id = data().deepCopy(fields()[1].schema(), other.author_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.author_address)) {
        this.author_address = data().deepCopy(fields()[2].schema(), other.author_address);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Author instance
     * @param other The existing instance to copy.
     */
    private Builder(Author other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.author_name)) {
        this.author_name = data().deepCopy(fields()[0].schema(), other.author_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.author_id)) {
        this.author_id = data().deepCopy(fields()[1].schema(), other.author_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.author_address)) {
        this.author_address = data().deepCopy(fields()[2].schema(), other.author_address);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'author_name' field.
      * @return The value.
      */
    public CharSequence getAuthorName() {
      return author_name;
    }

    /**
      * Sets the value of the 'author_name' field.
      * @param value The value of 'author_name'.
      * @return This builder.
      */
    public Builder setAuthorName(CharSequence value) {
      validate(fields()[0], value);
      this.author_name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'author_name' field has been set.
      * @return True if the 'author_name' field has been set, false otherwise.
      */
    public boolean hasAuthorName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'author_name' field.
      * @return This builder.
      */
    public Builder clearAuthorName() {
      author_name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'author_id' field.
      * @return The value.
      */
    public CharSequence getAuthorId() {
      return author_id;
    }

    /**
      * Sets the value of the 'author_id' field.
      * @param value The value of 'author_id'.
      * @return This builder.
      */
    public Builder setAuthorId(CharSequence value) {
      validate(fields()[1], value);
      this.author_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'author_id' field has been set.
      * @return True if the 'author_id' field has been set, false otherwise.
      */
    public boolean hasAuthorId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'author_id' field.
      * @return This builder.
      */
    public Builder clearAuthorId() {
      author_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'author_address' field.
      * @return The value.
      */
    public CharSequence getAuthorAddress() {
      return author_address;
    }

    /**
      * Sets the value of the 'author_address' field.
      * @param value The value of 'author_address'.
      * @return This builder.
      */
    public Builder setAuthorAddress(CharSequence value) {
      validate(fields()[2], value);
      this.author_address = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'author_address' field has been set.
      * @return True if the 'author_address' field has been set, false otherwise.
      */
    public boolean hasAuthorAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'author_address' field.
      * @return This builder.
      */
    public Builder clearAuthorAddress() {
      author_address = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Author build() {
      try {
        Author record = new Author();
        record.author_name = fieldSetFlags()[0] ? this.author_name : (CharSequence) defaultValue(fields()[0]);
        record.author_id = fieldSetFlags()[1] ? this.author_id : (CharSequence) defaultValue(fields()[1]);
        record.author_address = fieldSetFlags()[2] ? this.author_address : (CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Author>
    WRITER$ = (org.apache.avro.io.DatumWriter<Author>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Author>
    READER$ = (org.apache.avro.io.DatumReader<Author>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
